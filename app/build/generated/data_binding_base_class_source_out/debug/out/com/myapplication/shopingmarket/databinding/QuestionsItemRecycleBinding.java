// Generated by view binder compiler. Do not edit!
package com.myapplication.shopingmarket.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.myapplication.shopingmarket.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class QuestionsItemRecycleBinding implements ViewBinding {
  @NonNull
  private final CardView rootView;

  @NonNull
  public final TextView question;

  @NonNull
  public final TextView questionDate;

  @NonNull
  public final TextView reply;

  @NonNull
  public final TextView replyDate;

  @NonNull
  public final TextView replyTitle;

  @NonNull
  public final TextView userQ;

  private QuestionsItemRecycleBinding(@NonNull CardView rootView, @NonNull TextView question,
      @NonNull TextView questionDate, @NonNull TextView reply, @NonNull TextView replyDate,
      @NonNull TextView replyTitle, @NonNull TextView userQ) {
    this.rootView = rootView;
    this.question = question;
    this.questionDate = questionDate;
    this.reply = reply;
    this.replyDate = replyDate;
    this.replyTitle = replyTitle;
    this.userQ = userQ;
  }

  @Override
  @NonNull
  public CardView getRoot() {
    return rootView;
  }

  @NonNull
  public static QuestionsItemRecycleBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static QuestionsItemRecycleBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.questions_item_recycle, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static QuestionsItemRecycleBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.question;
      TextView question = ViewBindings.findChildViewById(rootView, id);
      if (question == null) {
        break missingId;
      }

      id = R.id.question_date;
      TextView questionDate = ViewBindings.findChildViewById(rootView, id);
      if (questionDate == null) {
        break missingId;
      }

      id = R.id.reply;
      TextView reply = ViewBindings.findChildViewById(rootView, id);
      if (reply == null) {
        break missingId;
      }

      id = R.id.reply_date;
      TextView replyDate = ViewBindings.findChildViewById(rootView, id);
      if (replyDate == null) {
        break missingId;
      }

      id = R.id.reply_title;
      TextView replyTitle = ViewBindings.findChildViewById(rootView, id);
      if (replyTitle == null) {
        break missingId;
      }

      id = R.id.userQ;
      TextView userQ = ViewBindings.findChildViewById(rootView, id);
      if (userQ == null) {
        break missingId;
      }

      return new QuestionsItemRecycleBinding((CardView) rootView, question, questionDate, reply,
          replyDate, replyTitle, userQ);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
